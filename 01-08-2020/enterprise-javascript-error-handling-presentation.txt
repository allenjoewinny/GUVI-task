Enterprise JavaScript Error Handiling

What do user see when theres a javascript error on a web page

acording to Donald A Norman:

everyone makes error 

the designer must assume that all posible error will occur and 
design so as to minimize the chance of error in first place.

Errors should be easy to dect ,they should have minimal consequences
and if posible their effect should be reversible.

Rule 1 assume that code will fail:

Rule 2 log errors to the server

example:

function log(sev,msg){
var img =new Image();
img.scr = "log.php?sev="+encodeURIComponent(msg);
}

log(1,"something bad happend.");

Rule 3 : you ,not the Browser Handle errors:

try-cache
try{

operation();
}
cache(ex)
{
cosole.log('error');
}

errors that are caught are considered to have been handled

window.onerror

window.onerror = function(msg,url,line)
{
console.log('error');
}

it is the last stop before the browser responds.
*********************************************************************

ERROR LIFECYCLE

              Error
                |
            try-cache
                |
           window.onerror
                |
           Browser Error
*************************************************************************

Rule 4:Identify where error might occur:

type coercion errors:

-> Boolean conversion
if(null)  |
if(0)     |  -> never executed
if("")    |

Data Type error:

often occurs with function arguments

Typially a symptom of insufficent value checking

fixed example of the data type error:

function sortArray(values)
{
if(typeof value.sort == "function"){
values.sort(function(a,b){
return b-a;
});
}
}

COMMUNICATION ERROR:

-> Invalid URL/post data
->server response ststus
-no network connection
->server response content


Invalid URl/Post Data:

->Typically long string concatenations
->USE encodeURIComponent();
->Make sure parameters are named properly

Server Response status:

->srver responds with the proper HTTP error code.

NO Network Connection:

example:

Fierfox fails silently but throws an error if you try to access 
any response property like status,status text,response text

Serer Response Content:

a status of 200/304 is not enough
server error oftern return HTML
if Possible, set status to 500

Rule :5 Throw your own errors:

function sortArray(values)
{
if(values instanceof Array)
{
values.sort(function(a,b)
{
return b-a;
});
}else{
throws new Error("sortArray():InVaild arg.");

}
}

Throw or TRY-Catch?

-> Error should be thrown in the low-level part of the application
example -> utilities,core libraries,etc.

use try-catch blocks in higer level parts
- Application Specific
-Client side business logic


Rule 6: DISTINGUISH FATAL VERSUS NON FATAL

NON-Fatal Errors:

->Wont interfere with usrs main tasks

->affects nly a porsion of the page easly disabled or ignored

->Recovery is possible 

-> a repeat of action may result in the appropreate result

->Don't tell the user it isn't working unless absolutely necessary

Fatal Errors:

-> the application absolutely cannot continue
->significantly interferes with user's ability to be productive
->other error will ocur if the application continues
->Message the user immediately
->Reload

Fatal or Non Fatal?

-> do not allow your code to determine what is and or not fatal
(watch out for loops)

->the user's experience comes First

Rule :7 Provide a debug mode:

-> Assign a variable that is globally available
->try-cach should re-throw the error
->window.onerror shold return false
->all the browser to handle the error

code for the debug mode:

for(var i=0;i<mode.length;i++)
{
try
{
mode[i].init();
}
catch(ex)
{
if(debugMode)
{
throw ex;
}
else
{
console.log('error');
}
}
}

window.onerror = function(msg,url,line)
{
if(debugMode)
{
return false;
}
else
{
console.log('error');
retutn true;
}
}






